# -*- coding: utf-8 -*-
"""tsp_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E4lvfJW0EbfAH4FsqrKvAaUhujMIx5Qt
"""

import itertools
import sys

MAX = 999
N = 4
graph = [[MAX, 10, 15, 20],
         [10, MAX, 35, 25],
         [15, 35, MAX, 30],
         [20, 25, 30, MAX]]
paths = list(range(N))


def calcCost():
    cost = 0
    prev = 0
    for j in range(1, N):
        cost += graph[prev][paths[j]]
        prev = paths[j]
    cost += graph[prev][0]
    return cost


def main():
    minCost = sys.maxsize             #This line initializes the variable minCost to the maximum possible integer value
    for perm in itertools.permutations(paths[1:]): #This line iterates over all permutations of the elements in the paths list starting from index 1.
                                                   #The itertools.permutations() function generates all possible permutations of the input iterable.
        paths[1:] = perm
        currCost = calcCost()
        if currCost < minCost:
            minCost = currCost
            final = paths[:]+[0] #updates the final variable to store the current best path (paths[:])

    print("Final Path is:", final)

    print("with cost:", minCost)


#if __name__ == "__main__":
main()

